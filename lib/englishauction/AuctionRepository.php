<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace englishauction;

use \maglev\MagLevNumber;
use \maglev\MagLevString;
use \maglev\MagLevNull;
use \php\Boot;
use \haxe\Exception;
use \maglev\MagLevResult;
use \maglev\MagLev;
use \maglev\MagLevBoolean;
use \maglev\MagLevArray;
use \maglev\MagLevObject;

class AuctionRepository {
	/**
	 * @var MagLev
	 */
	public $bus;

	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/englishauction/AuctionRepository.hx:10: characters 9-23
		$this->bus = $bus;
	}

	/**
	 * @param AuctionModel $auction
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Add ($auction, $callback) {
		#/src/englishauction/AuctionRepository.hx:14: characters 9-54
		$obj = MagLevObject::create();
		#/src/englishauction/AuctionRepository.hx:15: characters 9-62
		$obj->set("start", MagLevNumber::fromInt($auction->start));
		#/src/englishauction/AuctionRepository.hx:16: characters 9-58
		$obj->set("end", MagLevNumber::fromInt($auction->end));
		#/src/englishauction/AuctionRepository.hx:17: characters 9-80
		$obj->set("startingPrice", MagLevNumber::fromFloat($auction->startingPrice));
		#/src/englishauction/AuctionRepository.hx:18: characters 9-78
		$obj->set("reservePrice", MagLevNumber::fromFloat($auction->reservePrice));
		#/src/englishauction/AuctionRepository.hx:19: characters 9-82
		$obj->set("priceIncrement", MagLevNumber::fromFloat($auction->priceIncrement));
		#/src/englishauction/AuctionRepository.hx:20: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/AuctionRepository.hx:21: characters 9-23
		$args->push($obj);
		#/src/englishauction/AuctionRepository.hx:22: characters 9-100
		$res = $this->bus->call("Persistence.EnglishAuction.Auction.CreateNew", $args);
		#/src/englishauction/AuctionRepository.hx:23: lines 23-26
		$res->onResult(function ($ret) use (&$callback) {
			#/src/englishauction/AuctionRepository.hx:24: characters 13-58
			$callback((Boot::typedCast(Boot::getClass(MagLevString::class), $ret))->getString());
			#/src/englishauction/AuctionRepository.hx:25: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
		#/src/englishauction/AuctionRepository.hx:27: lines 27-29
		$res->onError(function ($err) {
			#/src/englishauction/AuctionRepository.hx:28: characters 13-18
			throw Exception::thrown($err->getMessage());
		});
	}

	/**
	 * @param AuctionModel $auction
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Edit ($auction, $callback) {
	}

	/**
	 * @param int $endfrom
	 * @param int $endto
	 * @param int $page
	 * @param int $perpage
	 * @param string $sort
	 * @param bool $asc
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function FindAuctionsEnding ($endfrom, $endto, $page, $perpage, $sort, $asc, $callback) {
		#/src/englishauction/AuctionRepository.hx:65: characters 9-50
		$auctions = new \Array_hx();
		#/src/englishauction/AuctionRepository.hx:66: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/AuctionRepository.hx:67: characters 9-49
		$args->push(MagLevNumber::fromInt($endfrom));
		#/src/englishauction/AuctionRepository.hx:68: characters 9-47
		$args->push(MagLevNumber::fromInt($endto));
		#/src/englishauction/AuctionRepository.hx:69: characters 9-46
		$args->push(MagLevNumber::fromInt($page));
		#/src/englishauction/AuctionRepository.hx:70: characters 9-49
		$args->push(MagLevNumber::fromInt($perpage));
		#/src/englishauction/AuctionRepository.hx:71: characters 9-49
		$args->push(MagLevString::fromString($sort));
		#/src/englishauction/AuctionRepository.hx:72: characters 9-47
		$args->push(MagLevBoolean::fromBool($asc));
		#/src/englishauction/AuctionRepository.hx:73: characters 9-96
		$res = $this->bus->call("Persistence.EnglishAuction.Auction.FindEnding", $args);
		#/src/englishauction/AuctionRepository.hx:74: lines 74-76
		$res->onError(function ($err) {
			#/src/englishauction/AuctionRepository.hx:75: characters 13-18
			throw Exception::thrown($err->getMessage());
		});
		#/src/englishauction/AuctionRepository.hx:77: lines 77-94
		$res->onResult(function ($ret) use (&$auctions, &$callback) {
			#/src/englishauction/AuctionRepository.hx:78: characters 13-58
			$arr = Boot::typedCast(Boot::getClass(MagLevArray::class), $ret);
			#/src/englishauction/AuctionRepository.hx:79: characters 13-23
			$i = 0;
			#/src/englishauction/AuctionRepository.hx:80: lines 80-91
			while ($i < $arr->size()) {
				#/src/englishauction/AuctionRepository.hx:81: characters 17-62
				$model = new AuctionModel();
				#/src/englishauction/AuctionRepository.hx:82: characters 17-61
				$resobj = Boot::typedCast(Boot::getClass(MagLevObject::class), $arr->get($i));
				#/src/englishauction/AuctionRepository.hx:83: characters 17-83
				$model->id = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("auctionId")))->getString();
				#/src/englishauction/AuctionRepository.hx:84: characters 17-79
				$model->start = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("start")))->getInt();
				#/src/englishauction/AuctionRepository.hx:85: characters 17-75
				$model->end = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("end")))->getInt();
				#/src/englishauction/AuctionRepository.hx:86: characters 17-97
				$model->startingPrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("startingPrice")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:87: characters 17-95
				$model->reservePrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("reservePrice")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:88: characters 17-99
				$model->priceIncrement = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("priceIncrement")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:89: characters 17-37
				$auctions->arr[$auctions->length++] = $model;
				#/src/englishauction/AuctionRepository.hx:90: characters 17-20
				++$i;
			}
			#/src/englishauction/AuctionRepository.hx:92: characters 13-31
			$callback($auctions);
			#/src/englishauction/AuctionRepository.hx:93: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
	}

	/**
	 * @param int $startfrom
	 * @param int $startto
	 * @param int $page
	 * @param int $perpage
	 * @param string $sort
	 * @param bool $asc
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function FindAuctionsStarting ($startfrom, $startto, $page, $perpage, $sort, $asc, $callback) {
		#/src/englishauction/AuctionRepository.hx:99: characters 9-50
		$auctions = new \Array_hx();
		#/src/englishauction/AuctionRepository.hx:100: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/AuctionRepository.hx:101: characters 9-51
		$args->push(MagLevNumber::fromInt($startfrom));
		#/src/englishauction/AuctionRepository.hx:102: characters 9-49
		$args->push(MagLevNumber::fromInt($startto));
		#/src/englishauction/AuctionRepository.hx:103: characters 9-46
		$args->push(MagLevNumber::fromInt($page));
		#/src/englishauction/AuctionRepository.hx:104: characters 9-49
		$args->push(MagLevNumber::fromInt($perpage));
		#/src/englishauction/AuctionRepository.hx:105: characters 9-49
		$args->push(MagLevString::fromString($sort));
		#/src/englishauction/AuctionRepository.hx:106: characters 9-47
		$args->push(MagLevBoolean::fromBool($asc));
		#/src/englishauction/AuctionRepository.hx:107: characters 9-98
		$res = $this->bus->call("Persistence.EnglishAuction.Auction.FindStarting", $args);
		#/src/englishauction/AuctionRepository.hx:108: lines 108-110
		$res->onError(function ($err) {
			#/src/englishauction/AuctionRepository.hx:109: characters 13-18
			throw Exception::thrown($err->getMessage());
		});
		#/src/englishauction/AuctionRepository.hx:111: lines 111-128
		$res->onResult(function ($ret) use (&$auctions, &$callback, &$res) {
			#/src/englishauction/AuctionRepository.hx:112: characters 13-70
			$arr = Boot::typedCast(Boot::getClass(MagLevArray::class), $res->getResult());
			#/src/englishauction/AuctionRepository.hx:113: characters 13-23
			$i = 0;
			#/src/englishauction/AuctionRepository.hx:114: lines 114-125
			while ($i < $arr->size()) {
				#/src/englishauction/AuctionRepository.hx:115: characters 17-62
				$model = new AuctionModel();
				#/src/englishauction/AuctionRepository.hx:116: characters 17-61
				$resobj = Boot::typedCast(Boot::getClass(MagLevObject::class), $arr->get($i));
				#/src/englishauction/AuctionRepository.hx:117: characters 17-83
				$model->id = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("auctionId")))->getString();
				#/src/englishauction/AuctionRepository.hx:118: characters 17-79
				$model->start = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("start")))->getInt();
				#/src/englishauction/AuctionRepository.hx:119: characters 17-75
				$model->end = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("end")))->getInt();
				#/src/englishauction/AuctionRepository.hx:120: characters 17-97
				$model->startingPrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("startingPrice")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:121: characters 17-95
				$model->reservePrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("reservePrice")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:122: characters 17-99
				$model->priceIncrement = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("priceIncrement")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:123: characters 17-37
				$auctions->arr[$auctions->length++] = $model;
				#/src/englishauction/AuctionRepository.hx:124: characters 17-20
				++$i;
			}
			#/src/englishauction/AuctionRepository.hx:126: characters 13-31
			$callback($auctions);
			#/src/englishauction/AuctionRepository.hx:127: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
	}

	/**
	 * @param string $auctionId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function FindById ($auctionId, $callback) {
		#/src/englishauction/AuctionRepository.hx:41: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/AuctionRepository.hx:42: characters 9-54
		$args->push(MagLevString::fromString($auctionId));
		#/src/englishauction/AuctionRepository.hx:43: characters 9-94
		$res = $this->bus->call("Persistence.EnglishAuction.Auction.FindById", $args);
		#/src/englishauction/AuctionRepository.hx:44: lines 44-46
		$res->onError(function ($err) {
			#/src/englishauction/AuctionRepository.hx:45: characters 13-18
			throw Exception::thrown($err->getMessage());
		});
		#/src/englishauction/AuctionRepository.hx:47: lines 47-61
		$res->onResult(function ($ret) use (&$callback, &$res) {
			#/src/englishauction/AuctionRepository.hx:48: lines 48-50
			if (($res->getResult() instanceof MagLevNull)) {
				#/src/englishauction/AuctionRepository.hx:49: characters 17-31
				$callback(null);
			}
			#/src/englishauction/AuctionRepository.hx:51: characters 13-75
			$resobj = Boot::typedCast(Boot::getClass(MagLevObject::class), $res->getResult());
			#/src/englishauction/AuctionRepository.hx:52: characters 13-58
			$model = new AuctionModel();
			#/src/englishauction/AuctionRepository.hx:53: characters 13-79
			$model->id = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("auctionId")))->getString();
			#/src/englishauction/AuctionRepository.hx:54: characters 13-75
			$model->start = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("start")))->getInt();
			#/src/englishauction/AuctionRepository.hx:55: characters 13-71
			$model->end = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("end")))->getInt();
			#/src/englishauction/AuctionRepository.hx:56: characters 13-93
			$model->startingPrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("startingPrice")))->getFloat();
			#/src/englishauction/AuctionRepository.hx:57: characters 13-91
			$model->reservePrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("reservePrice")))->getFloat();
			#/src/englishauction/AuctionRepository.hx:58: characters 13-95
			$model->priceIncrement = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("priceIncrement")))->getFloat();
			#/src/englishauction/AuctionRepository.hx:59: characters 13-28
			$callback($model);
			#/src/englishauction/AuctionRepository.hx:60: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
	}

	/**
	 * @param int $page
	 * @param int $perpage
	 * @param string $sort
	 * @param bool $asc
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function FindOpenAuctions ($page, $perpage, $sort, $asc, $callback) {
		#/src/englishauction/AuctionRepository.hx:132: characters 9-50
		$auctions = new \Array_hx();
		#/src/englishauction/AuctionRepository.hx:133: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/AuctionRepository.hx:134: characters 9-46
		$args->push(MagLevNumber::fromInt($page));
		#/src/englishauction/AuctionRepository.hx:135: characters 9-49
		$args->push(MagLevNumber::fromInt($perpage));
		#/src/englishauction/AuctionRepository.hx:136: characters 9-49
		$args->push(MagLevString::fromString($sort));
		#/src/englishauction/AuctionRepository.hx:137: characters 9-47
		$args->push(MagLevBoolean::fromBool($asc));
		#/src/englishauction/AuctionRepository.hx:138: characters 9-94
		$res = $this->bus->call("Persistence.EnglishAuction.Auction.FindOpen", $args);
		#/src/englishauction/AuctionRepository.hx:139: lines 139-141
		$res->onError(function ($err) {
			#/src/englishauction/AuctionRepository.hx:140: characters 13-18
			throw Exception::thrown($err->getMessage());
		});
		#/src/englishauction/AuctionRepository.hx:142: lines 142-159
		$res->onResult(function ($ret) use (&$auctions, &$callback, &$res) {
			#/src/englishauction/AuctionRepository.hx:143: characters 13-70
			$arr = Boot::typedCast(Boot::getClass(MagLevArray::class), $res->getResult());
			#/src/englishauction/AuctionRepository.hx:144: characters 13-23
			$i = 0;
			#/src/englishauction/AuctionRepository.hx:145: lines 145-156
			while ($i < $arr->size()) {
				#/src/englishauction/AuctionRepository.hx:146: characters 17-62
				$model = new AuctionModel();
				#/src/englishauction/AuctionRepository.hx:147: characters 17-61
				$resobj = Boot::typedCast(Boot::getClass(MagLevObject::class), $arr->get($i));
				#/src/englishauction/AuctionRepository.hx:148: characters 17-83
				$model->id = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("auctionId")))->getString();
				#/src/englishauction/AuctionRepository.hx:149: characters 17-79
				$model->start = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("start")))->getInt();
				#/src/englishauction/AuctionRepository.hx:150: characters 17-75
				$model->end = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("end")))->getInt();
				#/src/englishauction/AuctionRepository.hx:151: characters 17-97
				$model->startingPrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("startingPrice")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:152: characters 17-95
				$model->reservePrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("reservePrice")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:153: characters 17-99
				$model->priceIncrement = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("priceIncrement")))->getFloat();
				#/src/englishauction/AuctionRepository.hx:154: characters 17-37
				$auctions->arr[$auctions->length++] = $model;
				#/src/englishauction/AuctionRepository.hx:155: characters 17-20
				++$i;
			}
			#/src/englishauction/AuctionRepository.hx:157: characters 13-31
			$callback($auctions);
			#/src/englishauction/AuctionRepository.hx:158: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
	}

	/**
	 * @param string $auctionId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Remove ($auctionId, $callback) {
	}
}

Boot::registerClass(AuctionRepository::class, 'englishauction.AuctionRepository');
