<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace englishauction;

use \maglev\MagLevNumber;
use \maglev\MagLevString;
use \php\Boot;
use \maglev\MagLev;
use \maglev\MagLevArray;

class BidRepository {
	/**
	 * @var MagLev
	 */
	public $bus;

	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/englishauction/BidRepository.hx:10: characters 9-23
		$this->bus = $bus;
	}

	/**
	 * @param BidModel $bid
	 * 
	 * @return void
	 */
	public function Add ($bid) {
	}

	/**
	 * @param BidModel $bid
	 * 
	 * @return void
	 */
	public function Edit ($bid) {
	}

	/**
	 * @param string $bidId
	 * 
	 * @return BidModel
	 */
	public function FindById ($bidId) {
		#/src/englishauction/BidRepository.hx:27: characters 9-20
		return null;
	}

	/**
	 * @param string $auctionId
	 * 
	 * @return int
	 */
	public function GetNumberOfBids ($auctionId) {
		#/src/englishauction/BidRepository.hx:31: characters 9-42
		$pargs = MagLevArray::create();
		#/src/englishauction/BidRepository.hx:32: characters 9-66
		$pargs->push(MagLevString::fromString("EnglishAuction.Bid"));
		#/src/englishauction/BidRepository.hx:33: characters 9-63
		$pargs->push(MagLevString::fromString("CountForAuction"));
		#/src/englishauction/BidRepository.hx:34: characters 9-55
		$pargs->push(MagLevString::fromString($auctionId));
		#/src/englishauction/BidRepository.hx:35: characters 9-67
		$ret = $this->bus->call("Persistence.Get", $pargs);
		#/src/englishauction/BidRepository.hx:36: characters 9-27
		$count = 0;
		#/src/englishauction/BidRepository.hx:37: lines 37-39
		if (!$ret->isError()) {
			#/src/englishauction/BidRepository.hx:38: characters 13-65
			$count = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $ret->getResult()))->getInt();
		}
		#/src/englishauction/BidRepository.hx:40: characters 9-21
		return $count;
	}

	/**
	 * @param string $bidId
	 * 
	 * @return void
	 */
	public function Remove ($bidId) {
	}
}

Boot::registerClass(BidRepository::class, 'englishauction.BidRepository');
