<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace englishauction;

use \maglev\MagLevNumber;
use \maglev\MagLevString;
use \maglev\MagLevNull;
use \php\Boot;
use \haxe\Exception;
use \maglev\MagLevResult;
use \maglev\MagLev;
use \maglev\MagLevArray;
use \maglev\MagLevObject;

class BidRepository {
	/**
	 * @var MagLev
	 */
	public $bus;

	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/englishauction/BidRepository.hx:10: characters 9-23
		$this->bus = $bus;
	}

	/**
	 * @param BidModel $bid
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Add ($bid, $callback) {
		#/src/englishauction/BidRepository.hx:14: characters 9-55
		$data = MagLevObject::create();
		#/src/englishauction/BidRepository.hx:15: characters 9-70
		$data->set("auctionId", MagLevString::fromString($bid->auctionId));
		#/src/englishauction/BidRepository.hx:16: characters 9-64
		$data->set("userId", MagLevString::fromString($bid->userId));
		#/src/englishauction/BidRepository.hx:17: characters 9-61
		$data->set("price", MagLevNumber::fromFloat($bid->price));
		#/src/englishauction/BidRepository.hx:18: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/BidRepository.hx:19: characters 9-24
		$args->push($data);
		#/src/englishauction/BidRepository.hx:20: characters 9-72
		$res = $this->bus->call("Persistence.EnglishAuction.Bid.New", $args);
		#/src/englishauction/BidRepository.hx:21: lines 21-24
		$res->onResult(function ($ret) use (&$callback) {
			#/src/englishauction/BidRepository.hx:22: characters 13-58
			$callback((Boot::typedCast(Boot::getClass(MagLevString::class), $ret))->getString());
			#/src/englishauction/BidRepository.hx:23: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
		#/src/englishauction/BidRepository.hx:25: lines 25-27
		$res->onError(function ($err) {
			#/src/englishauction/BidRepository.hx:26: characters 13-18
			throw Exception::thrown($err->getMessage());
		});
	}

	/**
	 * @param BidModel $bid
	 * 
	 * @return void
	 */
	public function Edit ($bid) {
	}

	/**
	 * @param string $bidId
	 * 
	 * @return BidModel
	 */
	public function FindById ($bidId) {
		#/src/englishauction/BidRepository.hx:40: characters 9-20
		return null;
	}

	/**
	 * @param string $auctionId
	 * @param int $numBids
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function GetHighestBids ($auctionId, $numBids, $callback) {
		#/src/englishauction/BidRepository.hx:58: characters 9-53
		$args = MagLevArray::create();
		#/src/englishauction/BidRepository.hx:59: characters 9-54
		$args->push(MagLevString::fromString($auctionId));
		#/src/englishauction/BidRepository.hx:60: characters 9-49
		$args->push(MagLevNumber::fromInt($numBids));
		#/src/englishauction/BidRepository.hx:61: characters 9-110
		$res = $this->bus->call("Persistence.EnglishAuction.Bid.FindByHighestPriceForAuction", $args);
		#/src/englishauction/BidRepository.hx:62: lines 62-64
		$res->onError(function ($error) {
			#/src/englishauction/BidRepository.hx:63: characters 13-18
			throw Exception::thrown($error->getMessage());
		});
		#/src/englishauction/BidRepository.hx:65: lines 65-85
		$res->onResult(function ($onres) use (&$callback, &$auctionId) {
			#/src/englishauction/BidRepository.hx:66: characters 13-60
			$arr = Boot::typedCast(Boot::getClass(MagLevArray::class), $onres);
			#/src/englishauction/BidRepository.hx:67: characters 13-62
			$bids = new \Array_hx();
			#/src/englishauction/BidRepository.hx:68: characters 13-23
			$i = 0;
			#/src/englishauction/BidRepository.hx:69: lines 69-82
			while ($i < $arr->size()) {
				#/src/englishauction/BidRepository.hx:70: characters 17-54
				$model = new BidModel();
				#/src/englishauction/BidRepository.hx:71: characters 17-61
				$resobj = Boot::typedCast(Boot::getClass(MagLevObject::class), $arr->get($i));
				#/src/englishauction/BidRepository.hx:72: characters 17-79
				$model->id = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("bidId")))->getString();
				#/src/englishauction/BidRepository.hx:73: lines 73-77
				if ($resobj->exists("auctionId")) {
					#/src/englishauction/BidRepository.hx:74: characters 21-94
					$model->auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("auctionId")))->getString();
				} else {
					#/src/englishauction/BidRepository.hx:76: characters 21-48
					$model->auctionId = $auctionId;
				}
				#/src/englishauction/BidRepository.hx:78: characters 17-84
				$model->userId = (Boot::typedCast(Boot::getClass(MagLevString::class), $resobj->get("userId")))->getString();
				#/src/englishauction/BidRepository.hx:79: characters 17-81
				$model->price = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $resobj->get("price")))->getFloat();
				#/src/englishauction/BidRepository.hx:80: characters 17-33
				$bids->arr[$bids->length++] = $model;
				#/src/englishauction/BidRepository.hx:81: characters 17-20
				++$i;
			}
			#/src/englishauction/BidRepository.hx:83: characters 13-27
			$callback($bids);
			#/src/englishauction/BidRepository.hx:84: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
	}

	/**
	 * @param string $auctionId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function GetNumberOfBids ($auctionId, $callback) {
		#/src/englishauction/BidRepository.hx:44: characters 9-41
		$args = MagLevArray::create();
		#/src/englishauction/BidRepository.hx:45: characters 9-54
		$args->push(MagLevString::fromString($auctionId));
		#/src/englishauction/BidRepository.hx:46: characters 9-97
		$ret = $this->bus->call("Persistence.EnglishAuction.Bid.CountForAuction", $args);
		#/src/englishauction/BidRepository.hx:47: characters 9-27
		$count = 0;
		#/src/englishauction/BidRepository.hx:48: lines 48-51
		$ret->onResult(function ($result) use (&$callback) {
			#/src/englishauction/BidRepository.hx:49: characters 13-58
			$callback((Boot::typedCast(Boot::getClass(MagLevNumber::class), $result))->getInt());
			#/src/englishauction/BidRepository.hx:50: characters 13-64
			return MagLevResult::fromResult(MagLevNull::create());
		});
		#/src/englishauction/BidRepository.hx:52: lines 52-54
		$ret->onError(function ($error) {
			#/src/englishauction/BidRepository.hx:53: characters 13-18
			throw Exception::thrown($error->getMessage());
		});
	}

	/**
	 * @param string $bidId
	 * 
	 * @return void
	 */
	public function Remove ($bidId) {
	}
}

Boot::registerClass(BidRepository::class, 'englishauction.BidRepository');
