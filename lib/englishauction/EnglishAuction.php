<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace englishauction;

use \maglev\MagLevNumber;
use \maglev\MagLevString;
use \php\_Boot\HxAnon;
use \maglev\MagLevFunction;
use \maglev\MagLevNull;
use \php\Boot;
use \maglev\MagLevResult;
use \haxe\Exception;
use \maglev\MagLevAny;
use \maglev\MagLev;
use \maglev\MagLevBoolean;
use \maglev\MagLevError;
use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \maglev\MagLevArray;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \maglev\MagLevObject;

/**
 * English-Style Auction
 */
class EnglishAuction {

	/**
	 * @var AuctionRepository
	 */
	public $auctionRepo;
	/**
	 * @var BidRepository
	 */
	public $bidRepo;
	/**
	 * @var MagLev
	 */
	public $maglev;

	/**
	 * @param MagLev $maglev
	 * 
	 * @return void
	 */
	public function __construct ($maglev) {
		#/src/englishauction/EnglishAuction.hx:17: characters 3-23
		$this->maglev = $maglev;
		#/src/englishauction/EnglishAuction.hx:18: characters 3-51
		$this->auctionRepo = new AuctionRepository($maglev);
		#/src/englishauction/EnglishAuction.hx:19: characters 3-43
		$this->bidRepo = new BidRepository($maglev);
		#/src/englishauction/EnglishAuction.hx:20: characters 3-22
		$this->registerMyMethods();
	}

	/**
	 * @param AuctionModel $m
	 * 
	 * @return MagLevObject
	 */
	public function auctionModelToMagLevObject ($m) {
		#/src/englishauction/EnglishAuction.hx:346: characters 3-33
		$o = MagLevObject::create();
		#/src/englishauction/EnglishAuction.hx:347: characters 3-52
		$o->set("auctionId", MagLevString::fromString($m->id));
		#/src/englishauction/EnglishAuction.hx:348: characters 3-48
		$o->set("start", MagLevNumber::fromInt($m->start));
		#/src/englishauction/EnglishAuction.hx:349: characters 3-44
		$o->set("end", MagLevNumber::fromInt($m->end));
		#/src/englishauction/EnglishAuction.hx:350: characters 3-66
		$o->set("startingPrice", MagLevNumber::fromFloat($m->startingPrice));
		#/src/englishauction/EnglishAuction.hx:351: characters 3-64
		$o->set("reservePrice", MagLevNumber::fromFloat($m->reservePrice));
		#/src/englishauction/EnglishAuction.hx:352: characters 3-68
		$o->set("priceIncrement", MagLevNumber::fromFloat($m->priceIncrement));
		#/src/englishauction/EnglishAuction.hx:353: characters 3-11
		return $o;
	}

	/**
	 * @param MagLevAny $x
	 * 
	 * @return mixed
	 */
	public function convertToHaxe ($x) {
		#/src/englishauction/EnglishAuction.hx:357: lines 357-394
		if ($x->getType() === MagLevNull::getStaticType()) {
			#/src/englishauction/EnglishAuction.hx:358: characters 13-24
			return null;
		} else if ($x->getType() === MagLevBoolean::getStaticType()) {
			#/src/englishauction/EnglishAuction.hx:361: characters 13-44
			$y = Boot::typedCast(Boot::getClass(MagLevBoolean::class), $x);
			#/src/englishauction/EnglishAuction.hx:362: characters 13-31
			return $y->getBool();
		} else if ($x->getType() === MagLevString::getStaticType()) {
			#/src/englishauction/EnglishAuction.hx:365: characters 13-43
			$y = Boot::typedCast(Boot::getClass(MagLevString::class), $x);
			#/src/englishauction/EnglishAuction.hx:366: characters 13-33
			return $y->getString();
		} else if ($x->getType() === MagLevNumber::getStaticType()) {
			#/src/englishauction/EnglishAuction.hx:369: characters 13-43
			$y = Boot::typedCast(Boot::getClass(MagLevNumber::class), $x);
			#/src/englishauction/EnglishAuction.hx:370: characters 13-32
			return $y->getFloat();
		} else if ($x->getType() === MagLevArray::getStaticType()) {
			#/src/englishauction/EnglishAuction.hx:373: characters 13-42
			$y = Boot::typedCast(Boot::getClass(MagLevArray::class), $x);
			#/src/englishauction/EnglishAuction.hx:374: characters 13-51
			$arr = new \Array_hx();
			#/src/englishauction/EnglishAuction.hx:375: characters 13-23
			$i = 0;
			#/src/englishauction/EnglishAuction.hx:376: lines 376-378
			while ($i < $y->size()) {
				#/src/englishauction/EnglishAuction.hx:377: characters 17-50
				$x1 = $this->convertToHaxe($y->get($i));
				$arr->arr[$arr->length++] = $x1;
			}
			#/src/englishauction/EnglishAuction.hx:379: characters 13-23
			return $arr;
		} else if ($x->getType() === MagLevObject::getStaticType()) {
			#/src/englishauction/EnglishAuction.hx:382: characters 13-43
			$y = Boot::typedCast(Boot::getClass(MagLevObject::class), $x);
			#/src/englishauction/EnglishAuction.hx:383: characters 13-61
			$map = new StringMap();
			#/src/englishauction/EnglishAuction.hx:384: characters 13-33
			$keys = $y->keys();
			#/src/englishauction/EnglishAuction.hx:385: characters 13-23
			$i = 0;
			#/src/englishauction/EnglishAuction.hx:386: lines 386-389
			while ($i < $keys->size()) {
				#/src/englishauction/EnglishAuction.hx:387: characters 17-78
				$key = (Boot::typedCast(Boot::getClass(MagLevString::class), $keys->get($i)))->getString();
				#/src/englishauction/EnglishAuction.hx:388: characters 17-56
				$value = $this->convertToHaxe($y->get($key));
				$map->data[$key] = $value;
			}
			#/src/englishauction/EnglishAuction.hx:390: characters 13-23
			return $map;
		} else {
			#/src/englishauction/EnglishAuction.hx:393: characters 13-18
			throw Exception::thrown("convertToHaxe: unknown type");
		}
	}

	/**
	 * @param mixed $x
	 * 
	 * @return MagLevAny
	 */
	public function convertToMagLev ($x) {
		#/src/englishauction/EnglishAuction.hx:398: lines 398-443
		if ($x === null) {
			#/src/englishauction/EnglishAuction.hx:399: characters 13-39
			return MagLevNull::create();
		} else if (is_bool($x)) {
			#/src/englishauction/EnglishAuction.hx:402: characters 13-57
			return MagLevBoolean::fromBool(Boot::typedCast(Boot::getClass('Bool'), $x));
		} else if (is_string($x)) {
			#/src/englishauction/EnglishAuction.hx:405: characters 13-60
			return MagLevString::fromString(Boot::typedCast(Boot::getClass('String'), $x));
		} else if (Boot::isOfType($x, Boot::getClass('Int'))) {
			#/src/englishauction/EnglishAuction.hx:408: characters 13-54
			return MagLevNumber::fromInt(Boot::typedCast(Boot::getClass('Int'), $x));
		} else if ((is_float($x) || is_int($x))) {
			#/src/englishauction/EnglishAuction.hx:411: characters 13-45
			return MagLevNumber::fromFloat($x);
		} else if (($x instanceof \Array_hx)) {
			#/src/englishauction/EnglishAuction.hx:414: characters 13-56
			$arr = MagLevArray::create();
			#/src/englishauction/EnglishAuction.hx:415: characters 13-34
			$y = $x;
			#/src/englishauction/EnglishAuction.hx:416: lines 416-418
			$_g = 0;
			while ($_g < $y->length) {
				#/src/englishauction/EnglishAuction.hx:416: characters 17-21
				$item = ($y->arr[$_g] ?? null);
				#/src/englishauction/EnglishAuction.hx:416: lines 416-418
				++$_g;
				#/src/englishauction/EnglishAuction.hx:417: characters 17-48
				$arr->push($this->convertToMagLev($item));
			}
			#/src/englishauction/EnglishAuction.hx:419: characters 13-23
			return $arr;
		} else if (($x instanceof StringMap)) {
			#/src/englishauction/EnglishAuction.hx:422: characters 13-41
			$map = $x;
			#/src/englishauction/EnglishAuction.hx:423: characters 13-58
			$obj = MagLevObject::create();
			#/src/englishauction/EnglishAuction.hx:424: characters 24-34
			$key = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($map->data))));
			while ($key->hasNext()) {
				#/src/englishauction/EnglishAuction.hx:424: lines 424-426
				$key1 = $key->next();
				#/src/englishauction/EnglishAuction.hx:425: characters 17-60
				$obj->set($key1, $this->convertToMagLev(($map->data[$key1] ?? null)));
			}
			#/src/englishauction/EnglishAuction.hx:427: characters 13-23
			return $obj;
		} else if (\Reflect::isObject($x)) {
			#/src/englishauction/EnglishAuction.hx:430: characters 13-58
			$obj = MagLevObject::create();
			#/src/englishauction/EnglishAuction.hx:431: lines 431-434
			$_g = 0;
			$_g1 = \Reflect::fields($x);
			while ($_g < $_g1->length) {
				#/src/englishauction/EnglishAuction.hx:431: characters 18-23
				$field = ($_g1->arr[$_g] ?? null);
				#/src/englishauction/EnglishAuction.hx:431: lines 431-434
				++$_g;
				#/src/englishauction/EnglishAuction.hx:432: characters 17-57
				$val = \Reflect::getProperty($x, $field);
				#/src/englishauction/EnglishAuction.hx:433: characters 17-53
				$obj->set($field, $this->convertToMagLev($val));
			}
			#/src/englishauction/EnglishAuction.hx:435: characters 13-23
			return $obj;
		} else {
			#/src/englishauction/EnglishAuction.hx:437: characters 18-39
			$f = $x;
			#/src/englishauction/EnglishAuction.hx:437: lines 437-443
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/englishauction/EnglishAuction.hx:438: characters 13-49
				$f = $x;
				#/src/englishauction/EnglishAuction.hx:439: characters 13-50
				return MagLevFunction::fromFunction($f);
			} else {
				#/src/englishauction/EnglishAuction.hx:442: characters 13-18
				throw Exception::thrown("convertToMagLev: unknown type");
			}
		}
	}

	/**
	 * @return void
	 */
	public function registerMyMethods () {
		#/src/englishauction/EnglishAuction.hx:23: lines 23-343
		$_gthis = $this;
		#/src/englishauction/EnglishAuction.hx:24: characters 3-25
		$bus = $this->maglev;
		#/src/englishauction/EnglishAuction.hx:25: lines 25-38
		$this->maglev->register("EnglishAuction.Create", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:27: characters 4-48
			$model = new AuctionModel();
			#/src/englishauction/EnglishAuction.hx:28: characters 4-58
			$model->start = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(0)))->getInt();
			#/src/englishauction/EnglishAuction.hx:29: characters 4-56
			$model->end = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1)))->getInt();
			#/src/englishauction/EnglishAuction.hx:30: characters 4-68
			$model->startingPrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(2)))->getFloat();
			#/src/englishauction/EnglishAuction.hx:31: characters 4-67
			$model->reservePrice = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(3)))->getFloat();
			#/src/englishauction/EnglishAuction.hx:32: characters 4-69
			$model->priceIncrement = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(4)))->getFloat();
			#/src/englishauction/EnglishAuction.hx:33: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:34: lines 34-36
			$_gthis->auctionRepo->Add($model, function ($id) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:35: characters 5-50
				$result->setResult(MagLevString::fromString($id));
			});
			#/src/englishauction/EnglishAuction.hx:37: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:39: lines 39-53
		$this->maglev->register("EnglishAuction.GetStart", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:40: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:41: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:42: lines 42-51
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:43: lines 43-50
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:44: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:45: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:47: characters 6-36
					$start = $auction->start;
					#/src/englishauction/EnglishAuction.hx:48: characters 6-46
					$ret = MagLevNumber::fromFloat($start);
					#/src/englishauction/EnglishAuction.hx:49: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:52: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:54: lines 54-68
		$this->maglev->register("EnglishAuction.GetEnd", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:55: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:56: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:57: lines 57-66
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:58: lines 58-65
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:59: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:60: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:62: characters 6-32
					$end = $auction->end;
					#/src/englishauction/EnglishAuction.hx:63: characters 6-44
					$ret = MagLevNumber::fromFloat($end);
					#/src/englishauction/EnglishAuction.hx:64: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:67: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:69: lines 69-85
		$this->maglev->register("EnglishAuction.HasStarted", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:70: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:71: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:72: lines 72-83
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:73: lines 73-82
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:74: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:75: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:77: characters 6-38
					$start = $auction->start;
					#/src/englishauction/EnglishAuction.hx:78: characters 6-50
					$now = \Date::now()->getTime() / 1000;
					#/src/englishauction/EnglishAuction.hx:79: characters 6-38
					$started = $start <= $now;
					#/src/englishauction/EnglishAuction.hx:80: characters 6-48
					$ret = MagLevBoolean::fromBool($started);
					#/src/englishauction/EnglishAuction.hx:81: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:84: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:86: lines 86-102
		$this->maglev->register("EnglishAuction.HasEnded", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:87: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:88: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:89: lines 89-100
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:90: lines 90-99
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:91: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:92: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:94: characters 6-34
					$end = $auction->end;
					#/src/englishauction/EnglishAuction.hx:95: characters 6-50
					$now = \Date::now()->getTime() / 1000;
					#/src/englishauction/EnglishAuction.hx:96: characters 6-33
					$ended = $now > $end;
					#/src/englishauction/EnglishAuction.hx:97: characters 6-46
					$ret = MagLevBoolean::fromBool($ended);
					#/src/englishauction/EnglishAuction.hx:98: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:101: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:103: lines 103-116
		$this->maglev->register("EnglishAuction.Bid", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:104: characters 4-65
			$auctionId = Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0));
			#/src/englishauction/EnglishAuction.hx:105: characters 4-62
			$userId = Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(1));
			#/src/englishauction/EnglishAuction.hx:106: characters 4-61
			$price = Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(2));
			#/src/englishauction/EnglishAuction.hx:107: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:108: characters 4-40
			$model = new BidModel();
			#/src/englishauction/EnglishAuction.hx:109: characters 4-43
			$model->auctionId = $auctionId->getString();
			#/src/englishauction/EnglishAuction.hx:110: characters 4-37
			$model->userId = $userId->getString();
			#/src/englishauction/EnglishAuction.hx:111: characters 4-34
			$model->price = $price->getFloat();
			#/src/englishauction/EnglishAuction.hx:112: lines 112-114
			$_gthis->bidRepo->Add($model, function ($id) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:113: characters 5-50
				$result->setResult(MagLevString::fromString($id));
			});
			#/src/englishauction/EnglishAuction.hx:115: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:117: lines 117-132
		$this->maglev->register("EnglishAuction.GetHighestBidder", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:118: characters 4-65
			$auctionId = Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0));
			#/src/englishauction/EnglishAuction.hx:119: characters 4-59
			$myresult = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:120: lines 120-130
			$_gthis->bidRepo->GetHighestBids($auctionId->getString(), 1, function ($bids) use (&$myresult) {
				#/src/englishauction/EnglishAuction.hx:121: lines 121-129
				if ($bids->length > 0) {
					#/src/englishauction/EnglishAuction.hx:122: characters 6-24
					$row = ($bids->arr[0] ?? null);
					#/src/englishauction/EnglishAuction.hx:123: characters 6-53
					$myrow = MagLevObject::create();
					#/src/englishauction/EnglishAuction.hx:124: characters 6-62
					$myrow->set("userId", MagLevString::fromString($row->userId));
					#/src/englishauction/EnglishAuction.hx:125: characters 6-59
					$myrow->set("price", MagLevNumber::fromFloat($row->price));
					#/src/englishauction/EnglishAuction.hx:126: characters 6-31
					$myresult->setResult($myrow);
				} else {
					#/src/englishauction/EnglishAuction.hx:128: characters 6-45
					$myresult->setResult(MagLevNull::create());
				}
			});
			#/src/englishauction/EnglishAuction.hx:131: characters 4-19
			return $myresult;
		}));
		#/src/englishauction/EnglishAuction.hx:133: lines 133-148
		$this->maglev->register("EnglishAuction.GetHighestBids", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:134: characters 4-65
			$auctionId = Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0));
			#/src/englishauction/EnglishAuction.hx:135: characters 4-63
			$numBids = Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1));
			#/src/englishauction/EnglishAuction.hx:136: characters 4-59
			$myresult = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:137: lines 137-146
			$_gthis->bidRepo->GetHighestBids($auctionId->getString(), $numBids->getInt(), function ($bids) use (&$myresult) {
				#/src/englishauction/EnglishAuction.hx:138: characters 5-49
				$rows = MagLevArray::create();
				#/src/englishauction/EnglishAuction.hx:139: lines 139-144
				$_g = 0;
				while ($_g < $bids->length) {
					#/src/englishauction/EnglishAuction.hx:139: characters 9-12
					$bid = ($bids->arr[$_g] ?? null);
					#/src/englishauction/EnglishAuction.hx:139: lines 139-144
					++$_g;
					#/src/englishauction/EnglishAuction.hx:140: characters 6-53
					$myrow = MagLevObject::create();
					#/src/englishauction/EnglishAuction.hx:141: characters 6-62
					$myrow->set("userId", MagLevString::fromString($bid->userId));
					#/src/englishauction/EnglishAuction.hx:142: characters 6-59
					$myrow->set("price", MagLevNumber::fromFloat($bid->price));
					#/src/englishauction/EnglishAuction.hx:143: characters 6-22
					$rows->push($myrow);
				}
				#/src/englishauction/EnglishAuction.hx:145: characters 5-29
				$myresult->setResult($rows);
			});
			#/src/englishauction/EnglishAuction.hx:147: characters 4-19
			return $myresult;
		}));
		#/src/englishauction/EnglishAuction.hx:149: lines 149-156
		$this->maglev->register("EnglishAuction.GetNumberOfBids", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:150: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:151: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:152: lines 152-154
			$_gthis->bidRepo->GetNumberOfBids($auctionId, function ($numBids) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:153: characters 5-52
				$result->setResult(MagLevNumber::fromInt($numBids));
			});
			#/src/englishauction/EnglishAuction.hx:155: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:157: lines 157-171
		$this->maglev->register("EnglishAuction.GetPriceIncrement", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:158: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:159: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:160: lines 160-169
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:161: lines 161-168
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:162: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:163: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:165: characters 6-56
					$priceIncrement = $auction->priceIncrement;
					#/src/englishauction/EnglishAuction.hx:166: characters 6-55
					$ret = MagLevNumber::fromFloat($priceIncrement);
					#/src/englishauction/EnglishAuction.hx:167: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:170: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:172: lines 172-186
		$this->maglev->register("EnglishAuction.GetPriceIncrement", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:173: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:174: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:175: lines 175-184
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:176: lines 176-183
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:177: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:178: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:180: characters 6-56
					$priceIncrement = $auction->priceIncrement;
					#/src/englishauction/EnglishAuction.hx:181: characters 6-55
					$ret = MagLevNumber::fromFloat($priceIncrement);
					#/src/englishauction/EnglishAuction.hx:182: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:185: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:187: lines 187-201
		$this->maglev->register("EnglishAuction.GetReservePrice", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:188: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:189: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:190: lines 190-199
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:191: lines 191-198
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:192: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:193: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:195: characters 6-52
					$reservePrice = $auction->reservePrice;
					#/src/englishauction/EnglishAuction.hx:196: characters 6-53
					$ret = MagLevNumber::fromFloat($reservePrice);
					#/src/englishauction/EnglishAuction.hx:197: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:200: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:202: lines 202-216
		$this->maglev->register("EnglishAuction.GetStartingPrice", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:203: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:204: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:205: lines 205-214
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$result) {
				#/src/englishauction/EnglishAuction.hx:206: lines 206-213
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:207: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:208: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:210: characters 6-54
					$startingPrice = $auction->startingPrice;
					#/src/englishauction/EnglishAuction.hx:211: characters 6-54
					$ret = MagLevNumber::fromFloat($startingPrice);
					#/src/englishauction/EnglishAuction.hx:212: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:215: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:217: lines 217-241
		$this->maglev->register("EnglishAuction.CalcMinimumBid", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:218: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:219: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:220: lines 220-239
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$_gthis, &$result, &$auctionId) {
				#/src/englishauction/EnglishAuction.hx:221: lines 221-238
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:222: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:223: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:225: characters 6-31
					$highestBid = 0;
					#/src/englishauction/EnglishAuction.hx:226: lines 226-237
					$_gthis->bidRepo->GetHighestBids($auctionId, 1, function ($bids) use (&$result, &$auction, &$highestBid) {
						#/src/englishauction/EnglishAuction.hx:227: lines 227-229
						if ($bids->length > 0) {
							#/src/englishauction/EnglishAuction.hx:228: characters 8-34
							$highestBid = ($bids->arr[0] ?? null)->price;
						}
						#/src/englishauction/EnglishAuction.hx:231: characters 7-31
						$minBid = 0.00;
						#/src/englishauction/EnglishAuction.hx:232: characters 16-69
						$b = $highestBid + $auction->priceIncrement;
						$minBid = (is_nan($minBid) || is_nan($b) ? \Math::$NaN : max($minBid, $b));
						#/src/englishauction/EnglishAuction.hx:233: characters 16-55
						$b = $auction->startingPrice;
						$minBid = (is_nan($minBid) || is_nan($b) ? \Math::$NaN : max($minBid, $b));
						#/src/englishauction/EnglishAuction.hx:235: characters 7-48
						$ret = MagLevNumber::fromFloat($minBid);
						#/src/englishauction/EnglishAuction.hx:236: characters 7-28
						$result->setResult($ret);
					});
				}
			});
			#/src/englishauction/EnglishAuction.hx:240: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:242: lines 242-263
		$this->maglev->register("EnglishAuction.CalcTimeRemaining", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:243: characters 4-71
			$auctionId = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/englishauction/EnglishAuction.hx:244: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:245: characters 4-48
			$now = (int)(\Date::now()->getTime());
			#/src/englishauction/EnglishAuction.hx:246: lines 246-248
			if ($args->size() > 1) {
				#/src/englishauction/EnglishAuction.hx:247: characters 5-51
				$now = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1)))->getInt();
			}
			#/src/englishauction/EnglishAuction.hx:249: lines 249-261
			$_gthis->auctionRepo->FindById($auctionId, function ($auction) use (&$now, &$result) {
				#/src/englishauction/EnglishAuction.hx:250: lines 250-260
				if ($auction === null) {
					#/src/englishauction/EnglishAuction.hx:251: characters 6-94
					$error = MagLevError::create(0, "auction not found", MagLevNull::create());
					#/src/englishauction/EnglishAuction.hx:252: characters 6-28
					$result->setError($error);
				} else {
					#/src/englishauction/EnglishAuction.hx:254: characters 6-57
					$timeRemaining = (int)(($auction->end - $now));
					#/src/englishauction/EnglishAuction.hx:255: lines 255-257
					if ($timeRemaining < 0) {
						#/src/englishauction/EnglishAuction.hx:256: characters 7-24
						$timeRemaining = 0;
					}
					#/src/englishauction/EnglishAuction.hx:258: characters 6-52
					$ret = MagLevNumber::fromInt($timeRemaining);
					#/src/englishauction/EnglishAuction.hx:259: characters 6-27
					$result->setResult($ret);
				}
			});
			#/src/englishauction/EnglishAuction.hx:262: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:266: lines 266-289
		$this->maglev->register("EnglishAuction.GetAuctionsEnding", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:267: characters 4-63
			$endfrom = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(0)))->getInt();
			#/src/englishauction/EnglishAuction.hx:268: characters 4-61
			$endto = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1)))->getInt();
			#/src/englishauction/EnglishAuction.hx:269: characters 4-60
			$page = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(2)))->getInt();
			#/src/englishauction/EnglishAuction.hx:270: characters 4-63
			$perpage = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(3)))->getInt();
			#/src/englishauction/EnglishAuction.hx:271: characters 4-28
			$sort = "end";
			#/src/englishauction/EnglishAuction.hx:272: characters 4-24
			$asc = true;
			#/src/englishauction/EnglishAuction.hx:273: lines 273-275
			if ($args->size() > 4) {
				#/src/englishauction/EnglishAuction.hx:274: characters 5-55
				$sort = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(4)))->getString();
			}
			#/src/englishauction/EnglishAuction.hx:276: lines 276-278
			if ($args->size() > 5) {
				#/src/englishauction/EnglishAuction.hx:277: characters 5-53
				$asc = (Boot::typedCast(Boot::getClass(MagLevBoolean::class), $args->get(5)))->getBool();
			}
			#/src/englishauction/EnglishAuction.hx:279: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:280: lines 280-287
			$_gthis->auctionRepo->FindAuctionsEnding($endfrom, $endto, $page, $perpage, $sort, $asc, function ($auctions) use (&$_gthis, &$result) {
				#/src/englishauction/EnglishAuction.hx:281: characters 5-40
				$results = MagLevArray::create();
				#/src/englishauction/EnglishAuction.hx:282: lines 282-285
				$_g = 0;
				while ($_g < $auctions->length) {
					#/src/englishauction/EnglishAuction.hx:282: characters 9-16
					$auction = ($auctions->arr[$_g] ?? null);
					#/src/englishauction/EnglishAuction.hx:282: lines 282-285
					++$_g;
					#/src/englishauction/EnglishAuction.hx:283: characters 6-68
					$result1 = $_gthis->auctionModelToMagLevObject($auction);
					#/src/englishauction/EnglishAuction.hx:284: characters 6-26
					$results->push($result1);
				}
				#/src/englishauction/EnglishAuction.hx:286: characters 5-30
				$result->setResult($results);
			});
			#/src/englishauction/EnglishAuction.hx:288: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:290: lines 290-313
		$this->maglev->register("EnglishAuction.GetAuctionsStarting", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:291: characters 4-63
			$endfrom = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(0)))->getInt();
			#/src/englishauction/EnglishAuction.hx:292: characters 4-61
			$endto = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1)))->getInt();
			#/src/englishauction/EnglishAuction.hx:293: characters 4-60
			$page = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(2)))->getInt();
			#/src/englishauction/EnglishAuction.hx:294: characters 4-63
			$perpage = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(3)))->getInt();
			#/src/englishauction/EnglishAuction.hx:295: characters 4-28
			$sort = "end";
			#/src/englishauction/EnglishAuction.hx:296: characters 4-24
			$asc = true;
			#/src/englishauction/EnglishAuction.hx:297: lines 297-299
			if ($args->size() > 4) {
				#/src/englishauction/EnglishAuction.hx:298: characters 5-55
				$sort = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(4)))->getString();
			}
			#/src/englishauction/EnglishAuction.hx:300: lines 300-302
			if ($args->size() > 5) {
				#/src/englishauction/EnglishAuction.hx:301: characters 5-53
				$asc = (Boot::typedCast(Boot::getClass(MagLevBoolean::class), $args->get(5)))->getBool();
			}
			#/src/englishauction/EnglishAuction.hx:303: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:304: lines 304-311
			$_gthis->auctionRepo->FindAuctionsStarting($endfrom, $endto, $page, $perpage, $sort, $asc, function ($auctions) use (&$_gthis, &$result) {
				#/src/englishauction/EnglishAuction.hx:305: characters 5-40
				$results = MagLevArray::create();
				#/src/englishauction/EnglishAuction.hx:306: lines 306-309
				$_g = 0;
				while ($_g < $auctions->length) {
					#/src/englishauction/EnglishAuction.hx:306: characters 9-16
					$auction = ($auctions->arr[$_g] ?? null);
					#/src/englishauction/EnglishAuction.hx:306: lines 306-309
					++$_g;
					#/src/englishauction/EnglishAuction.hx:307: characters 6-68
					$result1 = $_gthis->auctionModelToMagLevObject($auction);
					#/src/englishauction/EnglishAuction.hx:308: characters 6-26
					$results->push($result1);
				}
				#/src/englishauction/EnglishAuction.hx:310: characters 5-30
				$result->setResult($results);
			});
			#/src/englishauction/EnglishAuction.hx:312: characters 4-17
			return $result;
		}));
		#/src/englishauction/EnglishAuction.hx:314: lines 314-335
		$this->maglev->register("EnglishAuction.GetOpenAuctions", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/englishauction/EnglishAuction.hx:315: characters 4-60
			$page = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(0)))->getInt();
			#/src/englishauction/EnglishAuction.hx:316: characters 4-63
			$perpage = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1)))->getInt();
			#/src/englishauction/EnglishAuction.hx:317: characters 4-28
			$sort = "end";
			#/src/englishauction/EnglishAuction.hx:318: characters 4-24
			$asc = true;
			#/src/englishauction/EnglishAuction.hx:319: lines 319-321
			if ($args->size() > 2) {
				#/src/englishauction/EnglishAuction.hx:320: characters 5-55
				$sort = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(2)))->getString();
			}
			#/src/englishauction/EnglishAuction.hx:322: lines 322-324
			if ($args->size() > 3) {
				#/src/englishauction/EnglishAuction.hx:323: characters 5-53
				$asc = (Boot::typedCast(Boot::getClass(MagLevBoolean::class), $args->get(3)))->getBool();
			}
			#/src/englishauction/EnglishAuction.hx:325: characters 4-57
			$result = MagLevResult::createAsync();
			#/src/englishauction/EnglishAuction.hx:326: lines 326-333
			$_gthis->auctionRepo->FindOpenAuctions($page, $perpage, $sort, $asc, function ($auctions) use (&$_gthis, &$result) {
				#/src/englishauction/EnglishAuction.hx:327: characters 5-40
				$results = MagLevArray::create();
				#/src/englishauction/EnglishAuction.hx:328: lines 328-331
				$_g = 0;
				while ($_g < $auctions->length) {
					#/src/englishauction/EnglishAuction.hx:328: characters 9-16
					$auction = ($auctions->arr[$_g] ?? null);
					#/src/englishauction/EnglishAuction.hx:328: lines 328-331
					++$_g;
					#/src/englishauction/EnglishAuction.hx:329: characters 6-68
					$result1 = $_gthis->auctionModelToMagLevObject($auction);
					#/src/englishauction/EnglishAuction.hx:330: characters 6-26
					$results->push($result1);
				}
				#/src/englishauction/EnglishAuction.hx:332: characters 5-30
				$result->setResult($results);
			});
			#/src/englishauction/EnglishAuction.hx:334: characters 4-17
			return $result;
		}));
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(EnglishAuction::class, 'englishauction.EnglishAuction');
Boot::registerMeta(EnglishAuction::class, new HxAnon(["obj" => new HxAnon(["SuppressWarnings" => \Array_hx::wrap([\Array_hx::wrap([
	"checkstyle:FieldDocComment",
	"checkstyle:LocalVariableName",
	"checkstyle:MultipleStringLiterals",
	"checkstyle:MagicNumber",
])])])]));
EnglishAuction::__hx__init();
